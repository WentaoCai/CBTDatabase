}else if (grepl("^TCONS_",input_regC)){
lncRNA_info<-lncRNA_bed[which(lncRNA_bed$Transcript_ID %in% input_regC),]
lnc.expr<-lncRNA_trans.expr[which(lncRNA_trans.expr$ID %in% input_regC),]
#snp.info<-editing_ann[which(editing_ann$Gene_name %in% input_regB ),] %>%
# dplyr::filter(grepl(paste(input$GB_mut_group,collapse="|"), Stages))%>%
#dplyr::filter(grepl(paste(input$GB_mut_tissue,collapse="|"), Tissues))
}
else{
shinyWidgets::sendSweetAlert(
session = session,
title = "Error input!", type = "error",
text = "Please input correct lncRNA name XLOC or TCONS!")
}
if ( nrow(lncRNA_info) < 1) {
shinyWidgets::sendSweetAlert(
session = session,
title = "Error input!", type = "error",
text = "No RNA editing site is detected in this specified genomic region!"
)
}else{
output$lnc_anno_table <-  DT::renderDataTable(lncRNA_info,options = list(scrollX = TRUE,pageLength = 30),
rownames = FALSE)
output$lnc_expr_table <-  DT::renderDataTable(lnc.expr,options = list(scrollX = TRUE,pageLength = 30),
rownames = FALSE)
output$download_lncRNA_annotation <- downloadHandler(
filename =  function() {
"RNA_editing.info.csv"
},
content = function(file){
write.csv(lncRNA_info, file, row.names = FALSE)
}
)
}
})
} else {
NULL
}
})
observe({
if (input$clearlnc>0) {
isolate({
updateTextInput(session, "regC", value="")
})
} else {NULL}
})
observeEvent(input$clearlnc2, {
updateCheckboxGroupInput(session, "lnc_mut_tissue", choices = c("Abomasum",
"Adrenal_gland",
"Antiprostate",
"Bladder",
"Blood_vessel",
"Cartilago_articularis",
"Cecum",
"Cerebellum",
"Cerebrum",
"Colon",
"Duodenum",
"Epididymis",
"Esophagus",
"Fibrous_cartilage",
"Heart_fat",
"Heart_muscle",
"Hypophysis",
"Hypothalamus",
"Ileum",
"Jejunum",
"Kidney_fat",
"Liver",
"Longissimus_muscle",
"Lung",
"Lymph_gland",
"Marrow",
"Medulla_oblongata",
"Nasal_mucosa",
"Omasum",
"Parotid_gland",
"Penis",
"Pineal_body",
"Prostate",
"Rectum",
"Renal_cortical",
"Renal_medulla",
"Reticulum",
"Rib_cartilage",
"Rumen",
"Seminal_vesicle",
"Skin",
"Spinal_cord",
"Spleen",
"Subcutaneous_fat",
"Sublingual_gland",
"Submandibular_gland",
"Testis",
"Thymus",
"Thyroid",
"Tongue",
"Trachea",
"Xiphoid"),selected = NULL)})
observeEvent(input$clearlnc3, {
updateCheckboxGroupInput(session, "lnc_mut_tissue", choices = c("Abomasum",
"Adrenal_gland",
"Antiprostate",
"Bladder",
"Blood_vessel",
"Cartilago_articularis",
"Cecum",
"Cerebellum",
"Cerebrum",
"Colon",
"Duodenum",
"Epididymis",
"Esophagus",
"Fibrous_cartilage",
"Heart_fat",
"Heart_muscle",
"Hypophysis",
"Hypothalamus",
"Ileum",
"Jejunum",
"Kidney_fat",
"Liver",
"Longissimus_muscle",
"Lung",
"Lymph_gland",
"Marrow",
"Medulla_oblongata",
"Nasal_mucosa",
"Omasum",
"Parotid_gland",
"Penis",
"Pineal_body",
"Prostate",
"Rectum",
"Renal_cortical",
"Renal_medulla",
"Reticulum",
"Rib_cartilage",
"Rumen",
"Seminal_vesicle",
"Skin",
"Spinal_cord",
"Spleen",
"Subcutaneous_fat",
"Sublingual_gland",
"Submandibular_gland",
"Testis",
"Thymus",
"Thyroid",
"Tongue",
"Trachea",
"Xiphoid"),selected = c("Abomasum",
"Adrenal_gland",
"Antiprostate",
"Bladder",
"Blood_vessel",
"Cartilago_articularis",
"Cecum",
"Cerebellum",
"Cerebrum",
"Colon",
"Duodenum",
"Epididymis",
"Esophagus",
"Fibrous_cartilage",
"Heart_fat",
"Heart_muscle",
"Hypophysis",
"Hypothalamus",
"Ileum",
"Jejunum",
"Kidney_fat",
"Liver",
"Longissimus_muscle",
"Lung",
"Lymph_gland",
"Marrow",
"Medulla_oblongata",
"Nasal_mucosa",
"Omasum",
"Parotid_gland",
"Penis",
"Pineal_body",
"Prostate",
"Rectum",
"Renal_cortical",
"Renal_medulla",
"Reticulum",
"Rib_cartilage",
"Rumen",
"Seminal_vesicle",
"Skin",
"Spinal_cord",
"Spleen",
"Subcutaneous_fat",
"Sublingual_gland",
"Submandibular_gland",
"Testis",
"Thymus",
"Thyroid",
"Tongue",
"Trachea",
"Xiphoid"))})
observe({
if (input$lncExam1 >0) {
isolate({
updateTextInput(session, "regC", value="chr10:8630000-8650000")
})
} else {NULL}
})
observe({
if (input$lncExam2 >0) {
isolate({
updateTextInput(session, "regC", value="TMED10")
})
} else {NULL}
})
observe({
if (input$lncExam3 >0) {
isolate({
updateTextInput(session, "regC", value="ENSBTAG00000005694")
})
} else {NULL}
})
}
runApp(list(ui = ui, server = server),launch.browser = TRUE)
klncRNA_gtf<-fread("E:/Bodymap_test/data/novel_lncRNA.gtf",header=F)
head(klncRNA_gtf)
klncRNA_gtf<-fread("E:/Bodymap_test/data/novel_lncRNA.gtf",header=F)
head(klncRNA_gtf)
colnames(klncRNA_gtf)<-c("Chrom","Software","category","Start","End","info1","Strand","info2","infor3")
klncRNA_gtf<-fread("E:/Bodymap_test/data/novel_lncRNA.gtf",header=F)
head(klncRNA_gtf)
colnames(klncRNA_gtf)<-c("Chrom","Software","category","Start","End","info1","Strand","info2","infor3")
head(klncRNA_gtf)
lncRNA.gtf<-dplyr::filter(klncRNA_gtf,grepl("XLOC_012623"), infor3))
lncRNA.gtf<-dplyr::filter(klncRNA_gtf,grepl("XLOC_012623"), infor3)
lncRNA.gtf<-dplyr::filter(klncRNA_gtf,grepl("XLOC_012623", infor3))
View(lncRNA.gtf)
devtools::install_github("junjunlab/transPlotR")
trancriptVis(gtfFile = lncRNA.gtf,
gene = 'XLOC_012623')
devtools::install_github("junjunlab/transPlotR")
install.packages("rtracklayer")
BiocManager::install("rtracklayer")
devtools::install_github("junjunlab/transPlotR")
trancriptVis(gtfFile = lncRNA.gtf,
gene = 'XLOC_012623')
library("trancriptVis")
library("transPlotR")
trancriptVis(gtfFile = lncRNA.gtf,
gene = 'XLOC_012623')
trancriptVis(gtfFile = klncRNA_gtf,
gene = 'XLOC_012623')
trancriptVis(gtfFile = lncRNA.gtf)
viewTranscripts <- function(x, ..., rescale_introns = FALSE, ncol = 1) {
gene_name <- gene_id <- transcript_id <- NULL
transcript_id <- meta <- val <- n <- type <-  NULL
# catch missing args
mandargs <- c("x")
passed <- names(as.list(match.call())[-1])
if (any(!mandargs %in% passed)) {
rlang::abort(paste(
"missing values for",
paste(setdiff(mandargs, passed), collapse = ", ")
))
}
# retrieve input object names
argnames <- as.character(match.call())[-1]
if (!is_gtf(x)) {
rlang::abort(sprintf("`%s` is not a GTF GRanges object", argnames[1]))
}
# prepare features
featmeta <- tryCatch(
{
GenomicRanges::mcols(x) %>%
as.data.frame() %>%
dplyr::select(gene_name, gene_id, transcript_id) %>%
dplyr::mutate(n = dplyr::row_number()) %>%
tidyr::gather(meta, val, -n)
},
error = function(e) {
GenomicRanges::mcols(x) %>%
as.data.frame() %>%
dplyr::select(-type) %>%
dplyr::mutate(n = dplyr::row_number()) %>%
tidyr::gather(meta, val, -n)
}
)
if (!missing(...)) {
x <- tryCatch(
{
x[featmeta[featmeta$val %in% c(...),"n"]]
},
error = function(e) {
y <- tryCatch({
x %>% as.data.frame() %>%
dplyr::filter(...) %>%
GenomicRanges::makeGRangesFromDataFrame(keep.extra.columns = TRUE)
},
error = function(e){
rlang::abort(sprintf(
"Variables given in ... are not found in `%s`",
argnames[1]
))
})
}
)
if (length(x) == 0) {
rlang::abort("No transcripts to plot")
}
}
# Need to have a check for plotting multiple genes.....
ngenes <- unique(x$gene_name)
plot <- BiocGenerics::do.call(patchwork::wrap_plots,
lapply(ngenes, function(y){
# Fetch gene exons and cdss
exons <- S4Vectors::split(x[x$type == "exon" & x$gene_name == y], ~transcript_id)
cdss <- S4Vectors::split(x[x$type == "CDS" & x$gene_name == y], ~transcript_id)
as <- S4Vectors::split(x[x$type == "AS" & x$gene_name == y], ~transcript_id)
if (length(cdss) == 0) {
cdss <- NULL
}
# Control check for number of plotted transcripts
if (length(exons) > 25) {
exons <- exons[seq_len(25)]
rlang::warn(sprintf("Plotting only first 25 transcripts for %s gene", y))
}
# main plot function
suppressWarnings(wiggleplotr::plotTranscripts(
exons = exons,
cdss = cdss[names(cdss) %in% names(exons)],
rescale_introns = rescale_introns
)) + ggplot2::ggtitle(y)
}))
plot + patchwork::plot_layout(ncol = ncol)
}
viewTranscripts(klncRNA_gtf, "XLOC_012623")
library(AnnotationHub)
install.packages("AnnotationHub")
BiocManager::install("AnnotationHub")
library("AnnotationHub")
viewTranscripts(klncRNA_gtf, "XLOC_012623")
devtools::install_github("dzhang32/ggtranscript")
library(ggtranscript)
head(lncRNA.gtf)
klncRNA_gtf<-fread("E:/Bodymap_test/data/novel_lncRNA1.gtf",header=F)
head(klncRNA_gtf)
colnames(klncRNA_gtf)<-c("Chrom","Software","category","Start","End","info1","Strand","info2","infor3","Transcript_id","Gene_id")
lncRNA.gtf<-dplyr::filter(klncRNA_gtf,grepl("XLOC_012623", infor3))
head(lncRNA.gtf)
lncRNA.exon<-dplyr::filter(klncRNA_gtf,grepl("XLOC_012623", infor3))%>%
dplyr::filter(category == "exon")
head(lncRNA.exon)
lncRNA.exon %>% ggplot(aes(
xstart = Start,
xend = End,
y = Transcript_id
)) +
geom_range(
) +
geom_intron(
data = to_intron(lncRNA.exon, "Transcript_id"),
aes(strand = Strand)
)
colnames(klncRNA_gtf)<-c("Chrom","Software","category","start","end","info1","Strand","info2","infor3","Transcript_id","Gene_id")
lncRNA.exon<-dplyr::filter(klncRNA_gtf,grepl("XLOC_012623", infor3))%>%
dplyr::filter(category == "exon")
head(lncRNA.exon)
lncRNA.exon %>% ggplot(aes(
xstart = start,
xend = end,
y = Transcript_id
)) +
geom_range(
) +
geom_intron(
data = to_intron(lncRNA.exon, "Transcript_id"),
aes(strand = Strand)
)
ggplot(lncRNA.exon,aes(
xstart = start,
xend = end,
y = Transcript_id
)) +
geom_range(
) +
geom_intron(
data = to_intron(lncRNA.exon, "Transcript_id"),
aes(strand = Strand)
)
ggplot(lncRNA.exon,aes(
xstart = start,
xend = end,
y = Transcript_id
)) +
geom_intron(
data = to_intron(lncRNA.exon, "Transcript_id"),
aes(strand = Strand)
)
as.tibble(lncRNA.exon)
ggplot(lncRNA.exon,aes(
xstart = start,
xend = end,
y = Transcript_id
)) +
geom_intron(
data = to_intron(lncRNA.exon, "Transcript_id"),
aes(strand = Strand)
)
colnames(klncRNA_gtf)<-c("Chrom","Software","category","start","end","info1","strand","info2","infor3","transcript_name","gene_name")
lncRNA.exon<-dplyr::filter(klncRNA_gtf,grepl("XLOC_012623", infor3))%>%
dplyr::filter(category == "exon")
head(lncRNA.exon)
as.tibble(lncRNA.exon)
ggplot(lncRNA.exon,aes(
xstart = start,
xend = end,
y = Transcript_id
)) +
geom_intron(
data = to_intron(lncRNA.exon, "Transcript_id"),
aes(strand = Strand)
)
ggplot(lncRNA.exon,aes(
xstart = start,
xend = end,
y = transcript_name
)) +
geom_intron(
data = to_intron(lncRNA.exon, "transcript_name"),
aes(strand = strand)
)
ggplot(lncRNA.exon,aes(
xstart = start,
xend = end,
y = transcript_name
)) +
geom_range(
fill = "white",
height = 0.25
) +
geom_intron(
data = to_intron(lncRNA.exon, "transcript_name"),
aes(strand = strand)
)
devtools::install_github("dzhang32/ggtranscript")
ggplot(lncRNA.exon,aes(
xstart = start,
xend = end,
y = transcript_name
)) +
geom_range(
fill = "white",
height = 0.25
) +
geom_intron(
data = to_intron(lncRNA.exon, "transcript_name"),
aes(strand = strand)
)
to_intron(lncRNA.exon, "transcript_name"),
to_intron(lncRNA.exon, "transcript_name")
ss<-to_intron(lncRNA.exon, "transcript_name")
View(ss)
colnames(klncRNA_gtf)<-c("Chrom","Software","type","start","end","info1","strand","info2","infor3","transcript_name","gene_name")
lncRNA.exon<-dplyr::filter(klncRNA_gtf,grepl("XLOC_012623", infor3))%>%
dplyr::filter(category == "exon")
head(lncRNA.exon)
klncRNA_gtf<-fread("E:/Bodymap_test/data/novel_lncRNA1.gtf",header=F)
head(klncRNA_gtf)
colnames(klncRNA_gtf)<-c("Chrom","Software","type","start","end","info1","strand","info2","infor3","transcript_name","gene_name")
lncRNA.exon<-dplyr::filter(klncRNA_gtf,grepl("XLOC_012623", infor3))%>%
dplyr::filter(category == "exon")
head(lncRNA.exon)
colnames(klncRNA_gtf)<-c("Chrom","Software","type","start","end","info1","strand","info2","infor3","transcript_name","gene_name")
lncRNA.exon<-dplyr::filter(klncRNA_gtf,grepl("XLOC_012623", infor3))%>%
dplyr::filter(type == "exon")
head(lncRNA.exon)
as.tibble(lncRNA.exon)
ggplot(lncRNA.exon,aes(
xstart = start,
xend = end,
y = transcript_name
)) +
geom_range(
fill = "white",
height = 0.25
) +
geom_intron(
data = to_intron(lncRNA.exon, "transcript_name"),
aes(strand = strand)
)
ss<-to_intron(lncRNA.exon, "transcript_name")
View(ss)
head(ss)
as.tibble(lncRNA.exon)
as.factor(lncRNA.exon$strand)
head(lncRNA.exon)
as.tibble(lncRNA.exon)
lncRNA.exon$strand<-as.factor(lncRNA.exon$strand)
ggplot(lncRNA.exon,aes(
xstart = start,
xend = end,
y = transcript_name
)) +
geom_range(
fill = "white",
height = 0.25
) +
geom_intron(
data = to_intron(lncRNA.exon, "transcript_name"),
aes(strand = strand)
)
